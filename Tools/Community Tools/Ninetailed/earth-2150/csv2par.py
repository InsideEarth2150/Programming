#!/usr/bin/env python3
from enum import Enum
from io import BytesIO
from itertools import count
from struct import pack

import csv
import sys


usage = 'To use this script, run it in a directory containing csv files generated by par2csv. It will compile them back into a new EARTH2150.par in the same directory.'


class Faction(Enum):
    NEUTRAL = 0
    UCS = 1
    ED = 2
    LC = 3


class EntityType(Enum):
    Vehicle = 1
    Cannon = 2
    Missile = 3
    Building = 4
    Special = 5
    Equipment = 6
    ShieldGenerator = 7
    SoundPack = 8
    SpecialUpdatesLinks = 9
    Parameters = 10


class ResearchTab(Enum):
    CHASSIS = 0
    WEAPON = 1
    AMMO = 2
    SPECIAL = 3


next_id = count()
class Research:
    def __init__(self, row):
        self.previous = row[10].strip().split()
        self.id = next(next_id)
        self.faction = Faction.__members__[row[1]]
        self.campaign_cost = int(row[2])
        self.skirmish_cost = int(row[3])
        self.campaign_time = int(row[4])
        self.skirmish_time = int(row[5])
        self.name = row[0]
        self.video = row[6]
        self.type = ResearchTab.__members__[row[7]]
        self.mesh = row[8]
        self.meshParamsIndex = int(row[9])

    def __repr__(self):
        items = ', '.join(f'{k}={v!r}' for k, v in self.__dict__.items())
        return 'Research{{{items}}}'


class Entity:
    def __init__(self, row):
        self.name = row[0]
        self.req_research = row[1].strip().split()
        self.fields = list()
        for f in row[2:]:
            # This will need extra processing later once par2csv can handle enums and floats
            try:
                self.fields.append(int(f))
            except ValueError:
                self.fields.append(f)

    def __repr__(self):
        return f'Entity{{name={self.name!r}, req_research={self.req_research}, fields={len(self.fields)}{self.fields}}}'


class EntityGroup:
    def __init__(self):
        self.faction = None
        self.entity_type = None
        self.entities = list()
        self.ref_fields = None

    def __repr__(self):
        entities = ''
        for entity in self.entities:
            entities += f'  {entity}\n'
        return f'EntityGroup{{faction={self.faction}, entity_type={self.entity_type}, entities=\n{entities}}}'


class ParWriter:
    def __init__(self, fd):
        self.fd = fd

    def write_header(self):
        self.fd.write(b'PAR\x00\x99\x00\x00\x00')

    def write(self, value):
        if isinstance(value, str):
            self.fd.write(pack('<I', len(value)))
            self.fd.write(value.encode(encoding='latin_1'))
        elif isinstance(value, int):
            self.fd.write(pack('<I', value))
        elif isinstance(value, float):
            self.fd.write(pack('<f', value))
        elif isinstance(value, list):
            self.fd.write(pack('<I', len(value)))
            for v in value:
                self.write(v)
        elif isinstance(value, Enum):
            self.write(value.value)
        else:
            raise TypeError(f'Cannot encode {type(value)}')

    def write_fields(self, fields, pad=True):
        types = bytearray()
        values = BytesIO()
        # Use a second internal writer to avoid duplicating the write method's logic here
        writer = ParWriter(values)
        for f in fields:
            is_string = type(f) is str
            types.append(1 if is_string else 0)
            writer.write(f)
        self.write(len(types))
        self.fd.write(types)
        self.fd.write(values.getbuffer())

csv_files = [
    ('buildrobot.csv', EntityType.Vehicle, {6, 7, 8, 9, 18, 19, 33, 34, 35, 36, 37, 38, 39, 66}),
    ('vehicle.csv', EntityType.Vehicle, {6, 7, 8, 9, 18, 19, 33, 34, 35, 36, 37}),
    ('miningrobot.csv', EntityType.Vehicle, {6, 7, 8, 9, 18, 19, 33, 34, 35, 36, 37, 47}),
    ('sapperrobot.csv', EntityType.Vehicle, {6, 7, 8, 9, 18, 19, 33, 34, 35, 36, 37, 39, 45}),
    ('supplytransporter.csv', EntityType.Vehicle, {6, 7, 8, 9, 18, 19, 33, 34, 35, 36, 37}),
    ('buildingtransporter.csv', EntityType.Special, {6, 7, 8, 9, 18, 19, 27}),
    ('resourcetransporter.csv', EntityType.Special, {6, 7, 8, 9, 18, 19}),
    ('unittransporter.csv', EntityType.Special, {6, 7, 8, 9, 18, 19}),
    ('building.csv', EntityType.Building, {6, 7, 8, 9, 18, 19, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 47, 50, 51, 53, 55, 58}),
    ('cannon.csv', EntityType.Cannon, {6, 7, 8, 9, 20, 30}),
    ('missile.csv', EntityType.Missile, {6, 7, 8, 9, 20, 29}),
    ('soundpack.csv', EntityType.SoundPack, set()),
    ('repairer.csv', EntityType.Equipment, {6, 7, 8, 9}),
    ('containertransporter.csv', EntityType.Equipment, {6, 7, 8, 9}),
    ('transporterhook.csv', EntityType.Equipment, {6, 7, 8, 9}),
    ('lookroundequipment.csv', EntityType.Equipment, {6, 7, 8, 9}),
    ('upgradecopula.csv', EntityType.Special, {6, 7, 8, 9}),
    ('equipment.csv', EntityType.Equipment, {6, 7, 8, 9}),
    ('passive.csv', EntityType.Special, {6, 7, 8, 9, 18}),
    ('artefact.csv', EntityType.Special, {6, 7, 8, 9, 18}),
    ('startingpositionmark.csv', EntityType.Special, {6, 7, 8, 9, 18, 19}),
    ('multiexplosion.csv', EntityType.Special, {6, 7, 8, 9, 13, 17, 21, 25, 29, 33, 37, 41}),
    ('explosion.csv', EntityType.Special, {6, 7, 8, 9}),
    ('smoke.csv', EntityType.Special, {6, 7, 8, 9}),
    ('flyingwaste.csv', EntityType.Special, {6, 7, 8, 9, 18, 20, 22, 24}),
    ('mine.csv', EntityType.Special, {6, 7, 8, 9}),
    ('walllaser.csv', EntityType.Special, {6, 7, 8, 9}),
    ('builderline.csv', EntityType.Special, {6, 7, 8, 9}),
    ('platoon.csv', EntityType.Special, {6, 7, 8, 9, 18, 19}),
    ('shieldgenerator.csv', EntityType.ShieldGenerator, set()),
    ('talkpack.csv', EntityType.SoundPack, set()),
    ('parameters.csv', EntityType.Parameters, set()),
    ('playertalkpack.csv', EntityType.SoundPack, set()),
    ('specialupdateslinks.csv', EntityType.SpecialUpdatesLinks, {0})
]

research = None
entity_groups = []

try:
    with open('research.csv', newline='') as csv_file:
        reader = csv.reader(csv_file)
        next(reader) # Skip header line
        research = [Research(row) for row in reader]
except FileNotFoundError:
    print(usage)
    sys.exit(1)

research_ids = {r.name : r.id for r in research}

for (filename, etype, ref_fields) in csv_files:
    try:
        with open(filename, newline='') as csv_file:
            print(f'Reading {filename}')
            reader = csv.reader(csv_file)
            next(reader) # Skip header line
            group = None
            for row in reader:
                if not row: continue
                if len(row) < 3:
                    group = EntityGroup()
                    group.faction = Faction.__members__[row[-1]]
                    group.entity_type = etype
                    group.ref_fields = ref_fields
                    entity_groups.append(group)
                else:
                    group.entities.append(Entity(row))
    except FileNotFoundError:
        print(f'{filename} not found')
        continue

with open('EARTH2150.par', 'wb') as parfile:
    writer = ParWriter(parfile)
    writer.write_header()
    writer.write(len(entity_groups))
    writer.write(0)

    for group in entity_groups:
        writer.write(group.faction.value)
        writer.write(group.entity_type.value)
        writer.write(len(group.entities))
        for entity in group.entities:
            writer.write(entity.name)
            writer.write([research_ids[r] for r in entity.req_research])
            fields = list()
            for (i, f) in enumerate(entity.fields):
                fields.append(f)
                if i in group.ref_fields:
                    fields.append(0xffffffff)
            writer.write_fields(fields)

    writer.write(len(research))

    for r in research:
        writer.write([research_ids[p] for p in r.previous])
        writer.write(r.id)
        writer.write(r.faction.value)
        writer.write(r.campaign_cost)
        writer.write(r.skirmish_cost)
        writer.write(r.campaign_time)
        writer.write(r.skirmish_time)
        writer.write(r.name)
        writer.write(r.video)
        writer.write(r.type)
        writer.write(r.mesh)
        writer.write(r.meshParamsIndex)

    writer.write(1)
    writer.write(len(research) - 1)

print(f'Wrote EARTH2150.par containing {sum(len(g.entities) for g in entity_groups)} entities (in {len(entity_groups)} groups) and {len(research)} research topics')
